\\
\ Copyright (c) 2011, Justin Grant <justin at imagine27 dot com> \
\ All rights reserved. \
\\
\ Redistribution and use in source and binary forms, with or without modification,  \
\ are permitted provided that the following conditions are met: \
\\
\ Redistributions of source code must retain the above copyright notice, this list  \
\ of conditions and the following disclaimer. \
\ Redistributions in binary form must reproduce the above copyright notice, this  \
\ list of conditions and the following disclaimer in the documentation and/or  \
\ other materials provided with the distribution. \
\ Neither the name of the <ORGANIZATION> nor the names of its contributors may be  \
\ used to endorse or promote products derived from this software without specific  \
\ prior written permission. \
\\
\ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND  \
\ ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \
\ WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  \
\ DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR  \
\ ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  \
\ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; \
\ LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  \
\ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  \
\ NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,  \
\ EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \
\\

(declare ceiling [number --> number])
(define ceiling 
  X -> (CEILING X))

(define expt 
  X Y -> (EXPT X Y))
(declare expt [number --> number --> number])

(define floor 
  X Y -> (FLOOR X Y))
(declare floor [number --> number --> number])

(define log
  X Y -> (LOG X Y))
(declare log [number --> number --> number])

(tc +)

(define arccot-
  {number --> number --> number --> number --> number --> number} 
  X N XPower    0 _ -> 0
  X N XPower Term 1 -> (+ (arccot- X (+ N 2) (floor XPower X) 
                                     (floor XPower N) 0) (floor XPower N))
  X N XPower Term 0 -> (- (arccot- X (+ N 2) (floor XPower X) 
                                      (floor XPower N) 1) (floor XPower N)))

(define arccot
  {number --> number --> number}
  X Unity -> (let XPower (floor (/ Unity X) 1)
                  (arccot- (* X X) 1 XPower (floor XPower 1) 1)))

(define machin-pi
  {number --> number} 
  Digits -> (let Guard (+ 10 (ceiling (log Digits 10)))
                 Unity (expt 10 (+ Digits Guard))
                 (floor (* 4 (- (* 4 (arccot 5 Guard)) 
                                (arccot 239 Unity))) (expt 10 Guard))))

\ (41+) (machin-pi 100) \
\ -167363040082988954581528598371418109641922612305278033080784515487271133656915730951304232544916379 : number \
